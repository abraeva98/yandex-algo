class Solution {
    public int[][] merge(int[][] intervals) {
        int[][] sorted = Arrays.stream(intervals).sorted((a, b) -> a[0] - b[0]).toArray(int[][]::new);

        List<List<Integer>> arr = new ArrayList();

        for(int i = 0; i < sorted.length; i ++) {
            if(arr.isEmpty()) {
                arr.add(new ArrayList<>(Arrays.asList(sorted[i][0], sorted[i][1])));
            } else {
                if((int) arr.get(arr.size() - 1).get(1) >= sorted[i][0]) {
                    List<Integer> last = arr.get(arr.size() - 1);
                    last.set(1, Math.max(sorted[i][1], last.get(1)));
                } else {
                    arr.add(new ArrayList<>(Arrays.asList(sorted[i][0], sorted[i][1])));
                }
            }
        }

        return arr.stream()
            .map(list -> list.stream().mapToInt(Integer::intValue).toArray())
            .toArray(int[][]::new);
    }
}
