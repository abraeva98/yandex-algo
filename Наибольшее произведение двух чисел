import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.Comparator;
import java.util.stream.Collectors;
public class Main {

    /*
	Для чтения входных данных необходимо получить их
	из стандартного потока ввода (System.in).
	Данные во входном потоке соответствуют описанному
	в условии формату. Обычно входные данные состоят
	из нескольких строк. Можно использовать более производительные
	и удобные классы BufferedReader, BufferedWriter, Scanner, PrintWriter.

	С помощью BufferedReader можно прочитать из стандартного потока:
	* строку -- reader.readLine()
	* число -- int n = Integer.parseInt(reader.readLine());
	* массив чисел известной длины (во входном потоке каждое число на новой строке) --
	int[] nums = new int[len];
    for (int i = 0; i < len; i++) {
        nums[i] = Integer.parseInt(reader.readLine());
    }
	* последовательность слов в строке --
	String[] parts = reader.readLine().split(" ");

	Чтобы вывести результат в стандартный поток вывода (System.out),
	Через BufferedWriter можно использовать методы
	writer.write("Строка"), writer.write('A') и writer.newLine().

	Возможное решение задачи "Вычислите сумму чисел в строке":
	int sum = 0;
    String[] parts = reader.readLine().split(" ");
    for (int i = 0; i < parts.length; i++) {
        int num = Integer.parseInt(parts[i]);
        sum += num;
    }
    writer.write(String.valueOf(sum));
	*/
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));
 /*    
        timeoutexception
        String[] inputString = reader.readLine().split(" ");
        int[] input = Arrays.stream(inputString).mapToInt(Integer::parseInt).toArray();
        int maxSum = Integer.MIN_VALUE;
        int[] res = new int[2];
        for(int i = 0; i < input.length - 1; i ++) {
             for(int j = i + 1; j < input.length; j ++) {
                 int sum = input[i] + input[j];
                 if(maxSum < Math.abs(sum)) {
                     maxSum = Math.abs(sum);
                     res[0] = input[i];
                     res[1] = input[j];
                 }
             }
        }
        String finalRes= Arrays.stream(res)
                                .boxed()
                                .sorted()
                                .map(String::valueOf)
                                .collect(Collectors.joining(" "));
            
        writer.write(String.join(" ", finalRes));*/
        String[] input = reader.readLine().split(" ");
        int[] inputInt = Arrays.stream(input)
                                     .mapToInt(Integer::parseInt) // to int
                                     .boxed() // to Integer
                                     .sorted(Comparator.reverseOrder())
                                     .mapToInt(Integer::intValue) // back to int
                                     .toArray();
        if(Math.abs(inputInt[0] + inputInt[1]) > Math.abs(inputInt[inputInt.length - 1] + inputInt[inputInt.length - 2])) {
            writer.write(String.valueOf(inputInt[1]) + " " + String.valueOf(inputInt[0]));
        } else {
            writer.write(String.valueOf(inputInt[inputInt.length - 1]) + " " + String.valueOf(inputInt[inputInt.length - 2]));
        }

        /*
        String firstTwo = Arrays.stream(inputInt)
                                   .limit(2)
                                   .boxed()
                                   .map(String::valueOf)
                                   .collect(Collectors.joining(" ")); */// toArray - stream to array of Objects that you can cast
                                                            // Integer[]::new creates a new array of Integers size -> new Integer[size]
      //  writer.write(firstTwo);
        reader.close();
        writer.close();
    }

}
