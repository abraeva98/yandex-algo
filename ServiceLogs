import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.TreeMap;
import java.util.Map;

/*
1) how to calculate time difference
   2024-01-31T08:34:18,824194

   DateTime time =
2) what DS to use to store 5 longest requests
3) how to get traceid from msg
4) add enums of state
*/

/*
enum Status {
  REQUEST_FAILED("Request failed"),
  REQUEST_COMPLETED("Request completed"),
  REQUEST_STARTED("Request started");
  private final String status;
  Status(String status) {
    this.status = status;
  }
  public String getStatus() {
    return status;
  }
}*/

class ParseMsg {
    private static String msg;
    public ParseMsg(String msg) {
        this.msg = msg;
    }

    public String getTraceIdFromMsg() {
        // Request started (Name: Insert, TraceId: e69d733f-e72e8c7-3fe03e8-17ac5302)
        String traceId = "TraceId: ";
        int startIdx = msg.indexOf(traceId);
        int endIdx = msg.indexOf(")", startIdx);
        return msg.substring(startIdx + traceId.length(), endIdx);
    }
}

class TimeToLong {
    private static String date;
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss,SSSSSS");

    public TimeToLong(String date) {
        this.date = date;
    }

    public Instant getInstant() {
        LocalDateTime dateTime = LocalDateTime.parse(date, formatter);
        return dateTime.toInstant(ZoneOffset.UTC);
    }
}

public class ServiceLog {
    public static void main(String[] args) throws IOException {
        // BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader reader = new BufferedReader(new FileReader("servicelog.txt"));
        String line;
        boolean newLog = true;
        String id = "";
        Instant startTime = null;
        TreeMap<Long, String> map = new TreeMap<>();

        while((line = reader.readLine()) != null) {
            String[] log = line.split("<tab>");

            if(newLog) {
                String msg = log[2];
                if(msg.startsWith("Request started")) {
                    id = new ParseMsg(msg).getTraceIdFromMsg();
                    newLog = false;
                    startTime = new TimeToLong(log[0]).getInstant();
                }
            } else {
                String msg = log[2];
                if(msg.startsWith("Request completed") || msg.startsWith("Request failed")) {
                    newLog = true;
                    Instant endTime = new TimeToLong(log[0]).getInstant();
                    long secTookToProcess = Duration.between(endTime, startTime).toMillis();
                    if(map.size() < 5) {
                        map.put(secTookToProcess, id);
                    } else {
                        if(map.firstKey().compareTo(secTookToProcess) < 0) {
                            map.pollFirstEntry();
                            map.put(secTookToProcess, id);
                        }
                    }
                }
            }
        }

        map.entrySet().stream().forEach(entry -> System.out.print(entry.getValue() + "\n"));
    }
}
