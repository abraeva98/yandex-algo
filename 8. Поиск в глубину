// dfs
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Map;
import java.util.HashMap;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Queue;
import java.util.LinkedList;
import java.util.stream.Collectors;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));
        int[] input = Arrays.stream(reader.readLine().split(" "))
                            .mapToInt(Integer::parseInt)
                            .toArray();
        Map<Integer, ArrayList> directions = new HashMap<>();
        
        for(int i = 0; i < input[1]; i ++) {
            int[] line = Arrays.stream(reader.readLine().split(" "))
                               .mapToInt(Integer::parseInt)
                               .toArray();
            
            directions.putIfAbsent(line[0], new ArrayList());
            directions.putIfAbsent(line[1], new ArrayList());
            directions.get(line[0]).add(line[1]);
            directions.get(line[1]).add(line[0]);
        }

        Set<Integer> seen = new TreeSet<>();
        seen.add(1);
        Main.dfs(1, directions, seen);
        // A set to keep track of visited nodes
        /*
        Queue<Integer> queue = new LinkedList<>();
        queue.add(1);  // Start from node 1
        Set<Integer> seen = new TreeSet<>();
        seen.add(1);

        // BFS traversal
        while (!queue.isEmpty()) {
            int current = queue.poll();
            ArrayList<Integer> neighbors = directions.get(current);

            if (neighbors != null) {
                for (int neighbor : neighbors) {
                    if (!seen.contains(neighbor)) {
                        seen.add(neighbor);
                        queue.add(neighbor);
                    }
                }
            }
        }*/

        // Output the result
        String res = seen.stream().map(String::valueOf).collect(Collectors.joining(" "));
        writer.write(seen.size() + "\n" + res + "\n");
        reader.close();
        writer.close();
    }

    private static void dfs(Integer node, Map<Integer, ArrayList> directions, Set<Integer> seen) {
        seen.add(node);
        ArrayList<Integer> neighbors = directions.get(node);
        if(neighbors != null) {
            for(int neighbor: neighbors) {
            if(!seen.contains(neighbor)) {
                dfs(neighbor, directions, seen);
            }
        }
        }
    }

}

// bfs
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Map;
import java.util.HashMap;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Queue;
import java.util.LinkedList;
import java.util.stream.Collectors;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));
        int[] input = Arrays.stream(reader.readLine().split(" "))
                            .mapToInt(Integer::parseInt)
                            .toArray();
        Map<Integer, ArrayList> directions = new HashMap<>();
        
        for(int i = 0; i < input[1]; i ++) {
            int[] line = Arrays.stream(reader.readLine().split(" "))
                               .mapToInt(Integer::parseInt)
                               .toArray();
            
            directions.putIfAbsent(line[0], new ArrayList());
            directions.putIfAbsent(line[1], new ArrayList());
            directions.get(line[0]).add(line[1]);
            directions.get(line[1]).add(line[0]);
        }

        Queue<Integer> queue = new LinkedList<>();
        queue.add(1);  // Start from node 1
        
        // A set to keep track of visited nodes
        Set<Integer> seen = new TreeSet<>();
        seen.add(1);

        // BFS traversal
        while (!queue.isEmpty()) {
            int current = queue.poll();
            ArrayList<Integer> neighbors = directions.get(current);

            if (neighbors != null) {
                for (int neighbor : neighbors) {
                    if (!seen.contains(neighbor)) {
                        seen.add(neighbor);
                        queue.add(neighbor);
                    }
                }
            }
        }

        // Output the result
        String res = seen.stream().map(String::valueOf).collect(Collectors.joining(" "));
        writer.write(seen.size() + "\n" + res + "\n");
        reader.close();
        writer.close();
    }

}
