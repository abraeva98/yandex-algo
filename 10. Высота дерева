import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
class TreeNode {
  int val;
  TreeNode left;
  TreeNode right;

  TreeNode() {}
  TreeNode(int val) {
    this.val = val;
  }
  TreeNode(int val, TreeNode left, TreeNode right) {
    this.val = val;
    this.left = left;
    this.right = right;
  }
}
public class Main {
  public static void main(String[] args) throws IOException {
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));

    // 7 3 2 1 9 5 4 6 8 0

    int[] input = Arrays.stream(reader.readLine().split(" ")).distinct().mapToInt(Integer::parseInt).toArray();
    TreeNode root = new TreeNode(input[0]);

    for(int i = 1; i < input.length - 1; i ++) {
      Main.helper(root, input[i]);
    }
    
    int res = Main.findDepth(root, 0);
    writer.write(String.valueOf(res));
    reader.close();
    writer.close();
  }

  private static void helper(TreeNode root, int val) {
      if(root.val < val) {
        if(root.right == null) {
          root.right = new TreeNode(val);
        } else {
          helper(root.right, val);
        }
      } else {
        if(root.left == null) {
          root.left = new TreeNode(val);
        } else {
          helper(root.left, val);
        }
      }
  }
  
  private static int findDepth(TreeNode root, int depth) {
    if(root == null) {
      return depth;
    }
    int leftDepth = findDepth(root.left, depth + 1);
    int rightDepth = findDepth(root.right, depth + 1);
    return Math.max(leftDepth, rightDepth);
  }

}
